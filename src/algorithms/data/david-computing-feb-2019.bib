@Book{ceruzzi_computing,
  title     = {Computing: A Concise History},
  author    = {Paul E. Ceruzzi},
  year      = {2012},
  publisher = {MIT Press},
  address   = {Cambridge, Massachusetts},
}

@Book{ceruzzi_history,
  title     = {A History of Modern Computing},
  author    = {Paul E. Ceruzzi},
  year      = {2014},
  publisher = {MIT Press},
  address   = {Massachusetts},
}

@Incollection{kahn_mainframe-tenney,
  title     = {James Tenney at Bell Labs},
  author    = {Douglas Kahn},
  booktitle = {Mainframe Experimentalism},
  publisher = {University of California Press},
  year      = {2012},
  editor    = {Hannah B. Higgins and Douglas Kahn},
  pages     = {131-146},
  address   = {Berkeley},
}

@Incollection{science_fortran,
  title     = {Fortran},
  author    = {Andrew Butterfield and Gerard Ekembe Ngondi},
  booktitle = {A Dictionary of Computer Science},
  publisher = {Oxford University Press},
  year      = {2016},
  address   = {Oxford},
}

@Book{berry_chronicle-of-permutation,
  title     = {A Chronicle of Permutation Statistical Methods: 1920â€“2000, and Beyond},
  author    = {Kenneth J. Berry and Janis E. Johnston and Paul W. {Mielke Jr}},
  year      = {2014},
  publisher = {Springer},
  address   = {London},
}

@Article{peck-shcrack_permute,
  title   = {Algorithm 86: Permute},
  author  = {J. E. L. Peck and G. F. Schrack},
  journal = {Communications of the ACM},
  year    = {1962},
  volume  = {5},
  number  = {4},
  pages   = {208-209},
  month   = {April},
}

@Article{trotter_perm,
  title   = {Algorithm 115: Perm},
  author  = {H. F. Trotter},
  journal = {Communications of the ACM},
  year    = {1962},
  volume  = {5},
  number  = {8},
  pages   = {434-435},
  month   = {August},
}

@Article{schrack-shimrat_permulex,
  title   = {Algorithm 102: Permutation in lexicographical order},
  author  = {Guenther F. Schrack and M. Shimrat},
  journal = {Communications of the ACM},
  year    = {1962},
  volume  = {5},
  number  = {6},
  pages   = {346},
  month   = {June},
}

@Article{howell_permutation-generator,
  title   = {Algorithm 87: Permutation generator},
  author  = {John R. Howell},
  journal = {Communications of the ACM},
  year    = {1962},
  volume  = {5},
  number  = {4},
  pages   = {209},
  month   = {April},
}

@Article{kurtzberg_combination,
  title   = {Algorithm 94: Combination},
  author  = {Jerome Kurtzberg},
  journal = {Communications of the ACM},
  year    = {1962},
  volume  = {5},
  number  = {6},
  pages   = {344},
  month   = {June},
}

@Article{eaves_permute,
  title   = {Algorithm 130: Permute},
  author  = {B. C. Eaves},
  journal = {Communications of the ACM},
  year    = {1962},
  volume  = {5},
  number  = {11},
  pages   = {551},
  month   = {November},
}

@Article{lotto_stepwise-combinations,
  title           = {On the Generation of All Possible Stepwise Combinations (in {Technical Notes and Short Papers})},
  author          = {Gary Lotto},
  journal         = {Mathematics of Computation},
  year            = {1962},
  volume          = {16},
  number          = {78},
  pages           = {241--243},
  month           = apr,
  issn            = {0025-5718 (print), 1088-6842 (electronic)},
  acknowledgement = {#ack-nhfb#},
  bibdate         = {Tue Oct 13 08:06:19 MDT 1998},
  bibsource       = {http://www.math.utah.edu/pub/tex/bib/mathcomp1960.bib; JSTOR database},
  coden           = {MCMPAF},
  fjournal        = {Mathematics of Computation},
  issn-l          = {0025-5718},
  journal-url     = {http://www.ams.org/mcom/},
}

@Article{coveyou_permutation,
  title   = {Algorithm 71: permutation},
  author  = {R. R. Coveyou and J. G. Sullivan},
  journal = {Communications of the ACM},
  year    = {1961},
  volume  = {4},
  number  = {11},
  pages   = {497},
  month   = {November},
}

@Incollection{tompkins_machine-attacks,
  title     = {Machine attacks on problems whose variables are permutations},
  author    = {C. Tompkins},
  booktitle = {Proceedings of the Symposium in Applied Mathematics, Numerical Analysis},
  publisher = {McGraw-Hill},
  year      = {1956},
  volume    = {6},
  pages     = {195-211},
  address   = {New York},
}

@Incollection{lehmer_teaching-combinatorial-tricks,
  title     = {Teaching combinatorial tricks to a computer},
  author    = {D.H. Lehmer},
  booktitle = {Proceedings of Symposium Applied Mathematics: Combinatorial Analysis},
  publisher = {American Mathematical Society},
  year      = {1960},
  volume    = {10},
  pages     = {179-193},
  address   = {Providence, R.I.},
}

@Article{wells_generation-of-permutations,
  title   = {Generation of permutations by transposition},
  author  = {M. B. Wells},
  journal = {Mathematics of Computation},
  year    = {1961},
  volume  = {15},
  pages   = {192-195},
}

@Book{steinhaus_one-hundred-problems,
  title     = {One Hundred Problems in Elementary Mathematics},
  author    = {H. Steinhaus},
  year      = {1963},
  publisher = {Pergamon Press},
  address   = {London},
}

@Article{johnson_generation-of-permutations,
  title   = {Generation of permutations by adjacent transposition},
  author  = {S. M. Johnson},
  journal = {Mathematics of Computation},
  year    = {1963},
  volume  = {17},
  number  = {83},
  pages   = {282-285},
  month   = jul,
}

@Article{heap_permutations-by-interchanges,
  title   = {Permutations by Interchanges},
  author  = {B. R. Heap},
  journal = {Computer Journal},
  year    = {1963},
  volume  = {6},
  number  = {3},
  pages   = {293-294},
  month   = nov,
}

@Article{durstenfeld_random-permutation,
  title   = {Algorithm 235: random permutation},
  author  = {Richard Durstenfeld},
  journal = {Communications of the ACM},
  year    = {1964},
  volume  = {7},
  number  = {7},
  pages   = {420},
  month   = jul,
}

@Booklet{datapro_honeywell,
  title   = {Honeywell Series 200 and 2000},
  author  = {{Datapro Research Corporation}},
  address = {Delran, N.J.},
  month   = apr,
  year    = {1974},
  url     = {http://www.bitsavers.org/pdf/honeywell/datapro/70C-480-01_7404_Honeywell_200_2000.pdf},
}

@Article{fike_permutation-generation,
  title    = {{A permutation generation method}},
  author   = {Fike, C. T.},
  journal  = {The Computer Journal},
  year     = {1975},
  volume   = {18},
  number   = {1},
  pages    = {21-22},
  month    = {01},
  issn     = {0010-4620},
  abstract = {{This paper describes a new method for generating permutation sequences. Timing experiments indicate that the method is competitive with the interchange methods of Wells, Johnson and Trotter. It is therefore among the fastest available. The method has the advantage that it generates permutations in what Lehmer calls an orderly listing.}},
  doi      = {10.1093/comjnl/18.1.21},
  eprint   = {http://oup.prod.sis.lan/comjnl/article-pdf/18/1/21/1240386/180021.pdf},
  url      = {https://dx.doi.org/10.1093/comjnl/18.1.21},
}

@Article{howell_generation-of-permutations,
  title   = {Generation of permutations by addition},
  author  = {J. R. Howell},
  journal = {Mathematics of Computation},
  year    = {1962},
  volume  = {5},
  number  = {16},
  pages   = {243-244},
}

@Article{spoletini_generation-of-permutations,
  title   = {Generation of Permutations Following Lehmer and Howell},
  author  = {Enrico Spoletini},
  journal = {Mathematics of Computation},
  year    = {1984},
  volume  = {43},
  number  = {168},
  pages   = {565-572},
  month   = oct,
}

@Article{ord-smith_permutation-sequences-1,
  title   = {Generation of permutation sequences: Part 1},
  author  = {R. J. Ord-Smith},
  journal = {The Computer Journal},
  year    = {1970},
  volume  = {13},
  number  = {2},
  pages   = {152-155},
  month   = may,
}

@Article{ord-smith_permutation-sequences-2,
  title   = {Generation of permutation sequences: Part 2},
  author  = {R. J. Ord-Smith},
  journal = {The Computer Journal},
  year    = {1971},
  volume  = {14},
  number  = {2},
  pages   = {136-139},
  month   = feb,
}

@Article{papworth_computers-and-change-ringing,
  title    = {{Computers and Change-Ringing}},
  author   = {Papworth, D. G.},
  journal  = {The Computer Journal},
  year     = {1960},
  volume   = {3},
  number   = {1},
  pages    = {47-50},
  month    = {01},
  issn     = {0010-4620},
  abstract = {{This paper describes some problems of change-ringer on church bells, and gives details of their solution on a Pegasus.}},
  doi      = {10.1093/comjnl/3.1.47},
  eprint   = {http://oup.prod.sis.lan/comjnl/article-pdf/3/1/47/1171754/030047.pdf},
  url      = {https://dx.doi.org/10.1093/comjnl/3.1.47},
}

@Article{rohl_programming-improvements-to-fikes-algorithm,
  title    = {{Programming Improvements to Fike's Algorithm for Generating Permutations}},
  author   = {Rohl, J. S.},
  journal  = {The Computer Journal},
  year     = {1976},
  volume   = {19},
  number   = {2},
  pages    = {156-159},
  month    = {05},
  issn     = {0010-4620},
  abstract = {{In a recent article Fike describes an elegant new algorithm for generating permutations and gives two procedures implementing this algorithm. In this paper we give improved versions with comparative measurements on two machine/compiler systems. The results show that on one of the systems a recursive procedure is the fastest.}},
  doi      = {10.1093/comjnl/19.2.156},
  eprint   = {http://oup.prod.sis.lan/comjnl/article-pdf/19/2/156/1138936/19-2-156.pdf},
  url      = {https://dx.doi.org/10.1093/comjnl/19.2.156},
}

@Article{roy_evaluation-of-permutation-algorithms,
  title    = {{Evaluation of permutation algorithms}},
  author   = {Roy, M. K.},
  journal  = {The Computer Journal},
  year     = {1978},
  volume   = {21},
  number   = {4},
  pages    = {296-301},
  month    = {01},
  issn     = {0010-4620},
  abstract = {{Six non-recursive algorithms which appear to be the best in respect of the permutation sequences they generate, have been considered for evaluation. Since the machine/compiler used has significant effect on the permutation algorithms, in this paper a different approach has been taken instead of the usual timing experiments. We have obtained the number of times certain constructs would be obeyed in terms of formulae related to n, the number of marks. A comparison based on these formulae shows that Ives' algorithm is the best of all.}},
  doi      = {10.1093/comjnl/21.4.296},
  eprint   = {http://oup.prod.sis.lan/comjnl/article-pdf/21/4/296/1021364/210296.pdf},
  url      = {https://dx.doi.org/10.1093/comjnl/21.4.296},
}

@Article{shen_on-the-generation-of-permutations,
  title   = {On the Generation of Permutations and Combinations},
  author  = {Mok-Kong Shen},
  journal = {BIT},
  year    = {1962},
  volume  = {2},
  number  = {4},
  pages   = {228-231},
}

@Article{shen_algorithm-202_perle,
  title      = {Algorithm 202: Generation of Permutations in Lexicographical Order},
  author     = {Shen, Mok-Kong},
  journal    = {Commun. ACM},
  year       = {1963},
  volume     = {6},
  number     = {9},
  pages      = {517--},
  month      = sep,
  issn       = {0001-0782},
  acmid      = {367601},
  address    = {New York, NY, USA},
  doi        = {10.1145/367593.367601},
  issue_date = {Sept. 1963},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/367593.367601},
}

@Article{topor_functional-programs,
  title    = {{Functional Programs for Generating Permutations}},
  author   = {Topor, R. W.},
  journal  = {The Computer Journal},
  year     = {1982},
  volume   = {25},
  number   = {2},
  pages    = {257-263},
  month    = {01},
  issn     = {0010-4620},
  abstract = {{This paper presents several functional programs for generating permutations represented as linear linked lists. Exact formulas for the storage used by some of these programs are derived and compared with the theoretical lower bound. Two different programs are shown to be optimal with respect to this measure. Problems considered include generation of all N! permutations of N distinct elements, generation of all permutations of length kâ‰¤N, and generation of all distinct permutations of a multiset of N elements.}},
  doi      = {10.1093/comjnl/25.2.257},
  eprint   = {http://oup.prod.sis.lan/comjnl/article-pdf/25/2/257/1080587/250257.pdf},
  url      = {https://dx.doi.org/10.1093/comjnl/25.2.257},
}

@Article{treble_computers-and-composition-in-change-ringing,
  title    = {{Computers and Composition in Change Ringing}},
  author   = {Treble, D. P.},
  journal  = {The Computer Journal},
  year     = {1970},
  volume   = {13},
  number   = {4},
  pages    = {350-351},
  month    = {11},
  issn     = {0010-4620},
  abstract = {{Programs have been written to produce touches of Plain Bob Minor in a systematic way. One is designed for short touches while the others use Q-set rules to produce extents of 720 changes.}},
  doi      = {10.1093/comjnl/13.4.350},
  eprint   = {http://oup.prod.sis.lan/comjnl/article-pdf/13/4/350/1438257/13-4-350.pdf},
  url      = {https://dx.doi.org/10.1093/comjnl/13.4.350},
}

@Article{woodall_generation-of-permutation-sequences,
  title    = {{Generation of permutation sequences}},
  author   = {Woodall, A. D.},
  journal  = {The Computer Journal},
  year     = {1977},
  volume   = {20},
  number   = {4},
  pages    = {346-349},
  month    = {01},
  issn     = {0010-4620},
  abstract = {{A recursive program for direct lexicographic generation of permutation sequences is described. From this, an approach to developing algorithms for non-lexicographic generation of sequences is presented, and one such algorithm is examined and proved.}},
  doi      = {10.1093/comjnl/20.4.346},
  eprint   = {http://oup.prod.sis.lan/comjnl/article-pdf/20/4/346/1108485/200346.pdf},
  url      = {https://dx.doi.org/10.1093/comjnl/20.4.346},
}

@Article{certification-of-permutation-algorithms,
  title   = {Certification of Algorithm 87: Permutation generator},
  author  = {Schrack, Guenther and Shimrat, M},
  journal = {Commun. ACM},
  year    = {1962},
  volume  = {5},
  pages   = {543},
  month   = {10},
  doi     = {10.1145/368959.368989},
}

@Misc{anon_honeywell200,
  title = {Honeywell Series 200 Computers},
  url   = {http://di-lema.com/FunStuffHtml/HoneywellSeries200.html},
}

@Article{sedgewick_permutation-generation-methods,
  title      = {Permutation Generation Methods},
  author     = {Sedgewick, Robert},
  journal    = {ACM Comput. Surv.},
  year       = {1977},
  volume     = {9},
  number     = {2},
  pages      = {137--164},
  month      = jun,
  issn       = {0360-0300},
  acmid      = {356692},
  address    = {New York, NY, USA},
  doi        = {10.1145/356689.356692},
  issue_date = {June 1977},
  numpages   = {28},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/356689.356692},
}

@Article{hall-knuth_combinatorial-analysis-and-computers,
  title     = {Combinatorial Analysis and Computers},
  author    = {Marshall Hall and D. E. Knuth},
  journal   = {The American Mathematical Monthly},
  year      = {1965},
  volume    = {72},
  number    = {2},
  pages     = {21--28},
  issn      = {00029890, 19300972},
  publisher = {Mathematical Association of America},
  url       = {http://www.jstor.org/stable/2313307},
}

@Article{DUROCHER2012287,
  title    = {Cool-lex order and k-ary Catalan structures},
  author   = {Stephane Durocher and Pak Ching Li and Debajyoti Mondal and Frank Ruskey and Aaron Williams},
  journal  = {Journal of Discrete Algorithms},
  year     = {2012},
  volume   = {16},
  pages    = {287 - 307},
  issn     = {1570-8667},
  note     = {Selected papers from the 22nd International Workshop on Combinatorial Algorithms (IWOCA 2011)},
  abstract = {For any given k, the sequence of k-ary Catalan numbers, Ct,k=1kt+1(ktt), enumerates a number of combinatorial objects, including k-ary Dyck words of length n=kt and k-ary trees with t internal nodes. We show that these objects can be efficiently ordered using the same variation of lexicographic order known as cool-lex order. In particular, we provide loopless algorithms that generate each successive object in O(1) time. The algorithms are also efficient in terms of memory, with the k-ary Dyck word algorithm using O(1) additional index variables, and the k-ary tree algorithm using O(t) additional pointers and index variables. We also show how to efficiently rank and unrank k-ary Dyck words in cool-lex order using O(kt) arithmetic operations, subject to an initial precomputation. Our results are based on the cool-lex successor rule for sets of binary strings that are bubble languages. However, we must complement and reverse 1/k-ary Dyck words to obtain the stated efficiency.},
  doi      = {https://doi.org/10.1016/j.jda.2012.04.015},
  keywords = {Catalan structures, Cool-lex order, Bubble langauges, Loopless algorithms, Ranking, -ary Dyck words, -ary trees},
  url      = {http://www.sciencedirect.com/science/article/pii/S1570866712000846},
}

@Incollection{walker_an-enumerative-technique,
  title     = {An Enumerative Techniqe for a Class of Combinatorial Problems},
  author    = {R. J. Walker},
  booktitle = {Proceedings of Symposium Applied Mathematics: Combinatorial Analysis},
  publisher = {American Mathematical Society},
  year      = {1960},
  volume    = {10},
  pages     = {91-94},
  address   = {Providence, R.I.},
}

@Comment{jabref-meta: databaseType:bibtex;}
